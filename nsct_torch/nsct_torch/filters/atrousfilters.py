"""
Generate pyramid 2D filters for nonsubsampled filter banks.
PyTorch translation of atrousfilters.m
"""

import torch
from typing import Tuple


def atrousfilters(fname: str, device: str = 'cpu') -> Tuple[torch.Tensor, torch.Tensor, 
                                                              torch.Tensor, torch.Tensor]:
    """
    Generate pyramid 2D filters for nonsubsampled filter banks.
    
    Args:
        fname: Filter name. Supported: 'pyr', 'pyrexc', 'maxflat'.
        device: Device to create tensors on ('cpu' or 'cuda').
    
    Returns:
        tuple: (h0, h1, g0, g1) pyramid filters.
    """
    if fname in ['pyr', 'pyrexc']:
        h0 = torch.tensor([
            [-0.003236043456039806, -0.012944173824159223, -0.019416260736238835],
            [-0.012944173824159223, 0.0625, 0.15088834764831843],
            [-0.019416260736238835, 0.15088834764831843, 0.3406092167691145]
        ], dtype=torch.float64, device=device)

        g0 = torch.tensor([
            [-0.00016755163599004882, -0.001005309815940293, -0.002513274539850732, -0.003351032719800976],
            [-0.001005309815940293, -0.005246663087920392, -0.01193886400821893, -0.015395021472477663],
            [-0.002513274539850732, -0.01193886400821893, 0.06769410071569153, 0.15423938036811946],
            [-0.003351032719800976, -0.015395021472477663, 0.15423938036811946, 0.3325667382415921]
        ], dtype=torch.float64, device=device)

        h1_g1_common = torch.tensor([
            [-0.003236043456039806, -0.012944173824159223, -0.019416260736238835],
            [-0.012944173824159223, -0.0625, -0.09911165235168155],
            [-0.019416260736238835, -0.09911165235168155, 0.8406092167691145]
        ], dtype=torch.float64, device=device)

        g1_h1_common = torch.tensor([
            [0.00016755163599004882, 0.001005309815940293, 0.002513274539850732, 0.003351032719800976],
            [0.001005309815940293, -0.0012254238241592198, -0.013949483640099517, -0.023437500000000007],
            [0.002513274539850732, -0.013949483640099517, -0.06769410071569153, -0.10246268507148255],
            [0.003351032719800976, -0.023437500000000007, -0.10246268507148255, 0.8486516952966369]
        ], dtype=torch.float64, device=device)

        if fname == 'pyr':
            g1 = h1_g1_common
            h1 = g1_h1_common
        else:  # 'pyrexc'
            h1 = h1_g1_common
            g1 = g1_h1_common

        # Symmetric extension for all filters
        g0 = torch.cat([g0, torch.flip(g0[:, :-1], dims=[1])], dim=1)
        g0 = torch.cat([g0, torch.flip(g0[:-1, :], dims=[0])], dim=0)
        h0 = torch.cat([h0, torch.flip(h0[:, :-1], dims=[1])], dim=1)
        h0 = torch.cat([h0, torch.flip(h0[:-1, :], dims=[0])], dim=0)
        g1 = torch.cat([g1, torch.flip(g1[:, :-1], dims=[1])], dim=1)
        g1 = torch.cat([g1, torch.flip(g1[:-1, :], dims=[0])], dim=0)
        h1 = torch.cat([h1, torch.flip(h1[:, :-1], dims=[1])], dim=1)
        h1 = torch.cat([h1, torch.flip(h1[:-1, :], dims=[0])], dim=0)

        return h0, h1, g0, g1
    
    elif fname == 'maxflat':
        # Quasi-tight frame filters, frame bounds A=.97 and B=1
        h0 = torch.tensor([
            [-7.900496718847182e-07, 0., 0.000014220894093924927, 0.000025281589500310983, -0.000049773129328737247, -0.00022753430550279883, -0.00033182086219158167],
            [0, 0, 0, 0, 0, 0, 0],
            [0.000014220894093924927, 0., -0.0002559760936906487, -0.00045506861100559767, 0.0008959163279172705, 0.004095617499050379, 0.00597277551944847],
            [0.000025281589500310983, 0., -0.00045506861100559767, 0.0009765625, 0.0015927401385195919, -0.0087890625, -0.01795090623402861],
            [-0.000049773129328737247, 0., 0.0008959163279172705, 0.0015927401385195919, -0.0031357071477104465, -0.014334661246676327, -0.020904714318069645],
            [-0.00022753430550279883, 0., 0.004095617499050379, -0.0087890625, -0.014334661246676327, 0.0791015625, 0.16155815610625748],
            [-0.00033182086219158167, 0., 0.00597277551944847, -0.01795090623402861, -0.020904714318069645, 0.16155815610625748, 0.3177420190660832]
        ], dtype=torch.float64, device=device)
        
        g0 = torch.tensor([
            [-6.391587676622346e-010, 0., 1.7257286726880333e-08, 3.067962084778726e-08, -1.3805829381504267e-07, -5.522331752601707e-07, -3.3747582932565985e-07, 1.9328161134105974e-06, 5.6949046198705095e-06, 7.649452131381623e-06],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [1.7257286726880333e-08, 0., -4.65946741625769e-07, -8.283497628902559e-07, 3.727573933006152e-06, 0.000014910295732024608, 9.111847391792816e-06, -0.000052186035062086126, -0.00015376242473650378, -0.00020653520754730382],
            [3.067962084778726e-08, 0., -8.283497628902559e-07, -1.2809236054493144e-06, 6.6267981031220475e-06, 0.00002305662489808766, 0.000010064497559808503, -0.0000806981871433068, -0.00021814634152337594, -0.00028666046030363884],
            [-1.3805829381504267e-07, 0., 3.727573933006152e-06, 6.6267981031220475e-06, -0.000029820591464049215, -0.00011928236585619686, -0.00007289477913434253, 0.000417488280496689, 0.0012300993978920302, 0.0016522816603784306],
            [-5.522331752601707e-07, 0., 0.000014910295732024608, 0.00002305662489808766, -0.00011928236585619686, -0.00041501924816557786, -0.00018116095607655303, 0.0014525673685795225, 0.0039266341474207675, 0.005159888285465499],
            [-3.3747582932565985e-07, 0., 9.111847391792816e-06, 0.000010064497559808503, -0.00007289477913434253, -0.00018116095607655303, 0.001468581806076247, 0.0006340633462679356, -0.01181401175635013, -0.021745034491193898],
            [1.9328161134105974e-06, 0., -0.000052186035062086126, -0.0000806981871433068, 0.000417488280496689, 0.0014525673685795225, 0.0006340633462679356, -0.005083985790028328, -0.013743219515972684, -0.018059608999129246],
            [5.6949046198705095e-06, 0., -0.00015376242473650378, -0.00021814634152337594, 0.0012300993978920302, 0.0039266341474207675, -0.01181401175635013, -0.013743219515972684, 0.0826466923977296, 0.1638988884584603],
            [7.649452131381623e-06, 0., -0.00020653520754730382, -0.00028666046030363884, 0.0016522816603784306, 0.005159888285465499, -0.021745034491193898, -0.018059608999129246, 0.1638988884584603, 0.31358726209239235]
        ], dtype=torch.float64, device=device)
        
        g1 = torch.tensor([
            [-7.900496718847182e-07, 0., 0.000014220894093924927, 0.000025281589500310983, -0.000049773129328737247, -0.00022753430550279883, -0.00033182086219158167],
            [0, 0, 0, 0, 0, 0, 0],
            [0.000014220894093924927, 0., -0.0002559760936906487, -0.00045506861100559767, 0.0008959163279172705, 0.004095617499050379, 0.00597277551944847],
            [0.000025281589500310983, 0., -0.00045506861100559767, -0.0009765625, 0.0015927401385195919, 0.0087890625, 0.01329909376597139],
            [-0.000049773129328737247, 0., 0.0008959163279172705, 0.0015927401385195919, -0.0031357071477104465, -0.014334661246676327, -0.020904714318069645],
            [-0.00022753430550279883, 0., 0.004095617499050379, 0.0087890625, -0.014334661246676327, -0.0791015625, -0.1196918438937425],
            [-0.00033182086219158167, 0., 0.00597277551944847, 0.01329909376597139, -0.020904714318069645, -0.1196918438937425, 0.8177420190660831]
        ], dtype=torch.float64, device=device)
        
        h1 = torch.tensor([
            [6.391587676622346e-010, 0., -1.7257286726880333e-08, -3.067962084778726e-08, 1.3805829381504267e-07, 5.522331752601707e-07, 3.3747582932565985e-07, -1.9328161134105974e-06, -5.6949046198705095e-06, -7.649452131381623e-06],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [-1.7257286726880333e-08, 0., 4.65946741625769e-07, 8.283497628902559e-07, -3.727573933006152e-06, -0.000014910295732024608, -9.111847391792816e-06, 0.000052186035062086126, 0.00015376242473650378, 0.00020653520754730382],
            [-3.067962084778726e-08, 0., 8.283497628902559e-07, -2.9917573832012203e-07, -6.6267981031220475e-06, 5.3851632897621965e-06, 0.00004049868144081346, -0.00001884807151416769, -0.00023692226948222173, -0.0003769812640795245],
            [1.3805829381504267e-07, 0., -3.727573933006152e-06, -6.6267981031220475e-06, 0.000029820591464049215, 0.00011928236585619686, 0.00007289477913434253, -0.000417488280496689, -0.0012300993978920302, -0.0016522816603784306],
            [5.522331752601707e-07, 0., -0.000014910295732024608, 5.3851632897621965e-06, 0.00011928236585619686, -0.00009693293921571956, -0.0007289762659346422, 0.00033926528725501844, 0.004264600850679991, 0.006785662753431441],
            [3.3747582932565985e-07, 0., -9.111847391792816e-06, 0.00004049868144081346, 0.00007289477913434253, -0.0007289762659346422, -0.001468581806076247, 0.002551416930771248, 0.01181401175635013, 0.017093222023136675],
            [-1.9328161134105974e-06, 0., 0.000052186035062086126, -0.00001884807151416769, -0.000417488280496689, 0.00033926528725501844, 0.002551416930771248, -0.0011874285053925643, -0.01492610297737997, -0.023749819637010044],
            [-5.6949046198705095e-06, 0., 0.00015376242473650378, -0.00023692226948222173, -0.0012300993978920302, 0.004264600850679991, 0.01181401175635013, -0.01492610297737997, -0.0826466923977296, -0.12203257624594532],
            [-7.649452131381623e-06, 0., 0.00020653520754730382, -0.0003769812640795245, -0.0016522816603784306, 0.006785662753431441, 0.017093222023136675, -0.023749819637010044, -0.12203257624594532, 0.821896776039774]
        ], dtype=torch.float64, device=device)
        
        # Symmetric extension for all filters
        g0 = torch.cat([g0, torch.flip(g0[:, :-1], dims=[1])], dim=1)
        g0 = torch.cat([g0, torch.flip(g0[:-1, :], dims=[0])], dim=0)
        h0 = torch.cat([h0, torch.flip(h0[:, :-1], dims=[1])], dim=1)
        h0 = torch.cat([h0, torch.flip(h0[:-1, :], dims=[0])], dim=0)
        g1 = torch.cat([g1, torch.flip(g1[:, :-1], dims=[1])], dim=1)
        g1 = torch.cat([g1, torch.flip(g1[:-1, :], dims=[0])], dim=0)
        h1 = torch.cat([h1, torch.flip(h1[:, :-1], dims=[1])], dim=1)
        h1 = torch.cat([h1, torch.flip(h1[:-1, :], dims=[0])], dim=0)
        
        return h0, h1, g0, g1
    
    else:
        raise NotImplementedError(f"Filters '{fname}' are not implemented in this translation.")
