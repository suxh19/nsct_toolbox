"""
test_edge_cases.py
==================

Extended test suite for edge cases and boundary conditions.
Tests all core functions against MATLAB reference implementation.

Tests the following scenarios:
- Very small inputs (1x1, 2x2)
- Non-square matrices
- Zero matrices
- Large extension/upsampling factors
- Special values (very small, very large, negative)
- Different filter types

Reference data generated by test_edge_cases_matlab.m
"""

import numpy as np
import pytest
from scipy.io import loadmat
import sys
from pathlib import Path

# Add parent directory to path to import nsct_python module
sys.path.insert(0, str(Path(__file__).parent.parent))

from nsct_python.core import nssfbdec, nssfbrec
from nsct_python.filters import (
    dfilters, atrousfilters, efilter2, 
    ldfilter, ld2quin, dmaxflat
)
from nsct_python.utils import (
    extend2, upsample2df, modulate2, 
    resampz, qupz
)

# Load MATLAB test results
MATLAB_RESULTS_PATH = Path(__file__).parent.parent / 'data/test_edge_cases_results.mat'


class TestExtend2EdgeCases:
    """Test extend2 function with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_small_matrix_2x2(self, matlab_results):
        """Test extend2 with very small 2x2 matrix."""
        input_data = matlab_results['edge_extend2_small']['input'][0, 0]
        expected = matlab_results['edge_extend2_small']['output'][0, 0]
        
        result = extend2(input_data, 1, 1, 1, 1, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="extend2 failed for 2x2 matrix")
    
    def test_single_element(self, matlab_results):
        """Test extend2 with single element matrix."""
        input_data = matlab_results['edge_extend2_single']['input'][0, 0]
        expected = matlab_results['edge_extend2_single']['output'][0, 0]
        
        result = extend2(input_data, 2, 2, 2, 2, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="extend2 failed for single element")
    
    def test_non_square_matrix(self, matlab_results):
        """Test extend2 with non-square matrix (3x5)."""
        input_data = matlab_results['edge_extend2_nonsquare']['input'][0, 0]
        expected = matlab_results['edge_extend2_nonsquare']['output'][0, 0]
        
        result = extend2(input_data, 2, 2, 3, 3, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="extend2 failed for non-square matrix")
    
    def test_large_extension(self, matlab_results):
        """Test extend2 with large extension relative to input size."""
        input_data = matlab_results['edge_extend2_large_ext']['input'][0, 0]
        expected = matlab_results['edge_extend2_large_ext']['output'][0, 0]
        
        result = extend2(input_data, 10, 10, 10, 10, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="extend2 failed for large extension")
    
    def test_zero_extension(self, matlab_results):
        """Test extend2 with zero extension (identity operation)."""
        input_data = matlab_results['edge_extend2_zero_ext']['input'][0, 0]
        expected = matlab_results['edge_extend2_zero_ext']['output'][0, 0]
        
        result = extend2(input_data, 0, 0, 0, 0, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="extend2 failed for zero extension")


class TestUpsample2dfEdgeCases:
    """Test upsample2df function with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_zero_matrix(self, matlab_results):
        """Test upsample2df with zero matrix."""
        input_data = matlab_results['edge_upsample2df_zero']['input'][0, 0]
        expected = matlab_results['edge_upsample2df_zero']['output'][0, 0]
        
        result = upsample2df(input_data, 1)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="upsample2df failed for zero matrix")
    
    def test_single_element(self, matlab_results):
        """Test upsample2df with single element."""
        input_data = matlab_results['edge_upsample2df_single']['input'][0, 0]
        expected = matlab_results['edge_upsample2df_single']['output'][0, 0]
        
        result = upsample2df(input_data, 2)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="upsample2df failed for single element")
    
    def test_high_power(self, matlab_results):
        """Test upsample2df with high power (power=3)."""
        input_data = matlab_results['edge_upsample2df_high_power']['input'][0, 0]
        expected = matlab_results['edge_upsample2df_high_power']['output'][0, 0]
        
        result = upsample2df(input_data, 3)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="upsample2df failed for high power")


class TestModulate2EdgeCases:
    """Test modulate2 function with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_single_row(self, matlab_results):
        """Test modulate2 with single row matrix."""
        input_data = matlab_results['edge_modulate2_single_row']['input'][0, 0]
        expected = matlab_results['edge_modulate2_single_row']['output'][0, 0]
        
        result = modulate2(input_data, 'c', [0, 0])
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="modulate2 failed for single row")
    
    def test_single_column(self, matlab_results):
        """Test modulate2 with single column matrix."""
        input_data = matlab_results['edge_modulate2_single_col']['input'][0, 0]
        expected = matlab_results['edge_modulate2_single_col']['output'][0, 0]
        
        result = modulate2(input_data, 'r', [0, 0])
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="modulate2 failed for single column")
    
    def test_negative_center(self, matlab_results):
        """Test modulate2 with negative center offset."""
        input_data = matlab_results['edge_modulate2_neg_center']['input'][0, 0]
        expected = matlab_results['edge_modulate2_neg_center']['output'][0, 0]
        
        result = modulate2(input_data, 'b', [-2, -2])
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="modulate2 failed for negative center")
    
    def test_large_center(self, matlab_results):
        """Test modulate2 with large center offset."""
        input_data = matlab_results['edge_modulate2_large_center']['input'][0, 0]
        expected = matlab_results['edge_modulate2_large_center']['output'][0, 0]
        
        result = modulate2(input_data, 'b', [10, 10])
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="modulate2 failed for large center")


class TestQupzEdgeCases:
    """Test qupz function with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_single_element_type1(self, matlab_results):
        """Test qupz with single element, type 1."""
        input_data = matlab_results['edge_qupz_single_t1']['input'][0, 0]
        expected = matlab_results['edge_qupz_single_t1']['output'][0, 0]
        
        result = qupz(input_data, 1)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="qupz failed for single element type 1")
    
    def test_single_element_type2(self, matlab_results):
        """Test qupz with single element, type 2."""
        input_data = matlab_results['edge_qupz_single_t2']['input'][0, 0]
        expected = matlab_results['edge_qupz_single_t2']['output'][0, 0]
        
        result = qupz(input_data, 2)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="qupz failed for single element type 2")
    
    def test_non_square_type1(self, matlab_results):
        """Test qupz with non-square matrix (2x4), type 1."""
        input_data = matlab_results['edge_qupz_nonsquare_t1']['input'][0, 0]
        expected = matlab_results['edge_qupz_nonsquare_t1']['output'][0, 0]
        
        result = qupz(input_data, 1)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="qupz failed for non-square matrix type 1")
    
    def test_small_nonzero_matrix(self, matlab_results):
        """Test qupz with small non-zero matrix (2x2 identity-like).
        
        Note: Original test used zeros(2,2) but this causes MATLAB resampz bug
        (index out of bounds). Changed to [1,0;0,1] to avoid MATLAB crash.
        """
        input_data = matlab_results['edge_qupz_small_nonzero']['input'][0, 0]
        expected = matlab_results['edge_qupz_small_nonzero']['output'][0, 0]
        
        result = qupz(input_data, 1)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="qupz failed for zero matrix")


class TestResampzEdgeCases:
    """Test resampz function with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_single_row_type1(self, matlab_results):
        """Test resampz with single row, type 1."""
        input_data = matlab_results['edge_resampz_row_t1']['input'][0, 0]
        expected = matlab_results['edge_resampz_row_t1']['output'][0, 0]
        
        result = resampz(input_data, 1, 1)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="resampz failed for single row type 1")
    
    def test_single_column_type3(self, matlab_results):
        """Test resampz with single column, type 3."""
        input_data = matlab_results['edge_resampz_col_t3']['input'][0, 0]
        expected = matlab_results['edge_resampz_col_t3']['output'][0, 0]
        
        result = resampz(input_data, 3, 1)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="resampz failed for single column type 3")
    
    def test_large_shift(self, matlab_results):
        """Test resampz with large shift (shift=5)."""
        input_data = matlab_results['edge_resampz_large_shift']['input'][0, 0]
        expected = matlab_results['edge_resampz_large_shift']['output'][0, 0]
        
        result = resampz(input_data, 1, 5)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="resampz failed for large shift")
    
    def test_zero_shift(self, matlab_results):
        """Test resampz with zero shift."""
        input_data = matlab_results['edge_resampz_zero_shift']['input'][0, 0]
        expected = matlab_results['edge_resampz_zero_shift']['output'][0, 0]
        
        result = resampz(input_data, 1, 0)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="resampz failed for zero shift")


class TestNssfbEdgeCases:
    """Test nssfbdec and nssfbrec functions with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_very_small_input(self, matlab_results):
        """Test nssfbdec with very small input (2x2)."""
        input_data = matlab_results['edge_nssfbdec_small']['input'][0, 0]
        h0 = matlab_results['edge_nssfbdec_small']['h0'][0, 0]
        h1 = matlab_results['edge_nssfbdec_small']['h1'][0, 0]
        y1_expected = matlab_results['edge_nssfbdec_small']['y1'][0, 0]
        y2_expected = matlab_results['edge_nssfbdec_small']['y2'][0, 0]
        
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="nssfbdec y1 failed for 2x2 input")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="nssfbdec y2 failed for 2x2 input")
    
    def test_zero_input(self, matlab_results):
        """Test nssfbdec with zero input matrix."""
        input_data = matlab_results['edge_nssfbdec_zero']['input'][0, 0]
        y1_expected = matlab_results['edge_nssfbdec_zero']['y1'][0, 0]
        y2_expected = matlab_results['edge_nssfbdec_zero']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=14,
                                            err_msg="nssfbdec y1 failed for zero input")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=14,
                                            err_msg="nssfbdec y2 failed for zero input")
    
    def test_constant_input(self, matlab_results):
        """Test nssfbdec with constant input matrix."""
        input_data = matlab_results['edge_nssfbdec_const']['input'][0, 0]
        y1_expected = matlab_results['edge_nssfbdec_const']['y1'][0, 0]
        y2_expected = matlab_results['edge_nssfbdec_const']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="nssfbdec y1 failed for constant input")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="nssfbdec y2 failed for constant input")
    
    def test_non_square_input(self, matlab_results):
        """Test nssfbdec with non-square input (6x10)."""
        input_data = matlab_results['edge_nssfbdec_nonsquare']['input'][0, 0]
        y1_expected = matlab_results['edge_nssfbdec_nonsquare']['y1'][0, 0]
        y2_expected = matlab_results['edge_nssfbdec_nonsquare']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="nssfbdec y1 failed for non-square input")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="nssfbdec y2 failed for non-square input")
    
    def test_perfect_reconstruction_small(self, matlab_results):
        """Test reconstruction with small input (4x4).
        
        Note: For non-multiples of 8, NSCT does not guarantee perfect reconstruction.
        This test validates that Python matches MATLAB's behavior, not perfect reconstruction.
        """
        input_data = matlab_results['edge_perfect_recon_small']['input'][0, 0]
        recon_expected = matlab_results['edge_perfect_recon_small']['recon'][0, 0]
        mse_expected = matlab_results['edge_perfect_recon_small']['mse'][0, 0][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        g0, g1 = dfilters('pkva', 'r')
        y1, y2 = nssfbdec(input_data, h0, h1)
        recon = nssfbrec(y1, y2, g0, g1)
        
        # Test that reconstruction matches MATLAB output
        np.testing.assert_array_almost_equal(recon, recon_expected, decimal=10,
                                            err_msg="Reconstruction mismatch with MATLAB for small input")
        
        # Test that MSE matches MATLAB (not testing for perfect reconstruction)
        mse = np.mean((input_data - recon) ** 2)
        np.testing.assert_almost_equal(mse, mse_expected, decimal=10,
                                      err_msg=f"MSE mismatch: Python={mse:.6e}, MATLAB={mse_expected:.6e}")


class TestEfilter2EdgeCases:
    """Test efilter2 function with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_small_filter(self, matlab_results):
        """Test efilter2 with small filter (1x1) on small image."""
        input_data = matlab_results['edge_efilter2_small']['input'][0, 0]
        filter_data = matlab_results['edge_efilter2_small']['filter'][0, 0]
        expected = matlab_results['edge_efilter2_small']['output'][0, 0]
        
        result = efilter2(input_data, filter_data, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="efilter2 failed for small filter")
    
    def test_large_filter_on_small_image(self, matlab_results):
        """Test efilter2 with large filter on small image."""
        input_data = matlab_results['edge_efilter2_large_filter']['input'][0, 0]
        filter_data = matlab_results['edge_efilter2_large_filter']['filter'][0, 0]
        expected = matlab_results['edge_efilter2_large_filter']['output'][0, 0]
        
        result = efilter2(input_data, filter_data, 'per')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=10,
                                            err_msg="efilter2 failed for large filter on small image")
    
    def test_maximum_shift(self, matlab_results):
        """Test efilter2 with maximum shift."""
        input_data = matlab_results['edge_efilter2_max_shift']['input'][0, 0]
        filter_data = matlab_results['edge_efilter2_max_shift']['filter'][0, 0]
        shift = matlab_results['edge_efilter2_max_shift']['shift'][0, 0].flatten().tolist()
        expected = matlab_results['edge_efilter2_max_shift']['output'][0, 0]
        
        result = efilter2(input_data, filter_data, 'per', shift)
        
        np.testing.assert_array_almost_equal(result, expected, decimal=10,
                                            err_msg="efilter2 failed for maximum shift")


class TestLdfilterLd2quinEdgeCases:
    """Test ldfilter and ld2quin functions with edge cases."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_ldfilter_pkva6(self, matlab_results):
        """Test ldfilter with pkva6 (smallest filter)."""
        expected = matlab_results['edge_ldfilter_pkva6']['output'][0, 0].flatten()
        
        result = ldfilter('pkva6')
        
        np.testing.assert_array_almost_equal(result, expected, decimal=14,
                                            err_msg="ldfilter failed for pkva6")
    
    def test_ld2quin_pkva6(self, matlab_results):
        """Test ld2quin with pkva6."""
        beta = matlab_results['edge_ld2quin_pkva6']['beta'][0, 0].flatten()
        h0_expected = matlab_results['edge_ld2quin_pkva6']['h0'][0, 0]
        h1_expected = matlab_results['edge_ld2quin_pkva6']['h1'][0, 0]
        
        h0, h1 = ld2quin(beta)
        
        np.testing.assert_array_almost_equal(h0, h0_expected, decimal=10,
                                            err_msg="ld2quin h0 failed for pkva6")
        np.testing.assert_array_almost_equal(h1, h1_expected, decimal=10,
                                            err_msg="ld2quin h1 failed for pkva6")


class TestSpecialValuesEdgeCases:
    """Test functions with special values (very small, very large, negative)."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_very_small_values(self, matlab_results):
        """Test nssfbdec with very small values (1e-10)."""
        input_data = matlab_results['edge_small_values']['input'][0, 0]
        y1_expected = matlab_results['edge_small_values']['y1'][0, 0]
        y2_expected = matlab_results['edge_small_values']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=20,
                                            err_msg="nssfbdec y1 failed for very small values")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=20,
                                            err_msg="nssfbdec y2 failed for very small values")
    
    def test_very_large_values(self, matlab_results):
        """Test nssfbdec with very large values (1e10)."""
        input_data = matlab_results['edge_large_values']['input'][0, 0]
        y1_expected = matlab_results['edge_large_values']['y1'][0, 0]
        y2_expected = matlab_results['edge_large_values']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        # For large values, use relative tolerance
        np.testing.assert_allclose(y1, y1_expected, rtol=1e-10,
                                   err_msg="nssfbdec y1 failed for very large values")
        np.testing.assert_allclose(y2, y2_expected, rtol=1e-10,
                                   err_msg="nssfbdec y2 failed for very large values")
    
    def test_negative_values(self, matlab_results):
        """Test nssfbdec with negative values."""
        input_data = matlab_results['edge_negative_values']['input'][0, 0]
        y1_expected = matlab_results['edge_negative_values']['y1'][0, 0]
        y2_expected = matlab_results['edge_negative_values']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="nssfbdec y1 failed for negative values")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="nssfbdec y2 failed for negative values")
    
    def test_mixed_values(self, matlab_results):
        """Test nssfbdec with mixed positive and negative values."""
        input_data = matlab_results['edge_mixed_values']['input'][0, 0]
        y1_expected = matlab_results['edge_mixed_values']['y1'][0, 0]
        y2_expected = matlab_results['edge_mixed_values']['y2'][0, 0]
        
        h0, h1 = dfilters('pkva', 'd')
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="nssfbdec y1 failed for mixed values")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="nssfbdec y2 failed for mixed values")


class TestDifferentFilterTypes:
    """Test nssfbdec with different filter types."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat(MATLAB_RESULTS_PATH)
    
    def test_pyrexc_filters(self, matlab_results):
        """Test nssfbdec with pyrexc filters."""
        input_data = matlab_results['edge_filter_pyrexc']['input'][0, 0]
        h0 = matlab_results['edge_filter_pyrexc']['h0'][0, 0]
        h1 = matlab_results['edge_filter_pyrexc']['h1'][0, 0]
        y1_expected = matlab_results['edge_filter_pyrexc']['y1'][0, 0]
        y2_expected = matlab_results['edge_filter_pyrexc']['y2'][0, 0]
        
        y1, y2 = nssfbdec(input_data, h0, h1)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="nssfbdec y1 failed for pyrexc filters")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="nssfbdec y2 failed for pyrexc filters")
    
    def test_dmaxflat_n1_filters(self, matlab_results):
        """Test dmaxflat filters with N=1."""
        f1_expected = matlab_results['edge_filter_dmaxflat_1']['f1'][0, 0]
        f2_expected = matlab_results['edge_filter_dmaxflat_1']['f2'][0, 0]
        
        f1 = dmaxflat(1, 0)
        f2 = dmaxflat(1, 1)
        
        np.testing.assert_array_almost_equal(f1, f1_expected, decimal=14,
                                            err_msg="dmaxflat failed for N=1, d=0")
        np.testing.assert_array_almost_equal(f2, f2_expected, decimal=14,
                                            err_msg="dmaxflat failed for N=1, d=1")
    
    def test_dmaxflat_n2_filters(self, matlab_results):
        """Test dmaxflat filters with N=2."""
        f1_expected = matlab_results['edge_filter_dmaxflat_2']['f1'][0, 0]
        f2_expected = matlab_results['edge_filter_dmaxflat_2']['f2'][0, 0]
        
        f1 = dmaxflat(2, 0)
        f2 = dmaxflat(2, 1)
        
        np.testing.assert_array_almost_equal(f1, f1_expected, decimal=14,
                                            err_msg="dmaxflat failed for N=2, d=0")
        np.testing.assert_array_almost_equal(f2, f2_expected, decimal=14,
                                            err_msg="dmaxflat failed for N=2, d=1")


if __name__ == '__main__':
    # Run tests with pytest
    pytest.main([__file__, '-v', '--tb=short'])
