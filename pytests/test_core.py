"""
test_core.py
============

Test suite for nsct_python.core module.

Tests the following functions against MATLAB reference implementation:
- nssfbdec: Two-channel nonsubsampled filter bank decomposition
- nssfbrec: Two-channel nonsubsampled filter bank reconstruction

Reference data generated by test_core_matlab.m
"""

import numpy as np
import pytest
from scipy.io import loadmat
from nsct_python.core import nssfbdec, nssfbrec
from nsct_python.filters import dfilters, atrousfilters


class TestNssfbdec:
    """Test nssfbdec function - Two-channel nonsubsampled filter bank decomposition."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat('test_core_results.mat')
    
    def test_nssfbdec_no_mup(self, matlab_results):
        """Test nssfbdec without mup parameter (uses efilter2)."""
        x = matlab_results['test1_input']
        f1 = matlab_results['test1_f1']
        f2 = matlab_results['test1_f2']
        
        y1_expected = matlab_results['test1_y1']
        y2_expected = matlab_results['test1_y2']
        
        y1, y2 = nssfbdec(x, f1, f2)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="y1 mismatch in nssfbdec (no mup)")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="y2 mismatch in nssfbdec (no mup)")
    
    def test_nssfbdec_mup_identity(self, matlab_results):
        """Test nssfbdec with mup=1 (identity upsampling)."""
        x = matlab_results['test2_input']
        f1 = matlab_results['test2_f1']
        f2 = matlab_results['test2_f2']
        mup = int(matlab_results['test2_mup'][0, 0])
        
        y1_expected = matlab_results['test2_y1']
        y2_expected = matlab_results['test2_y2']
        
        y1, y2 = nssfbdec(x, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="y1 mismatch in nssfbdec (mup=1)")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="y2 mismatch in nssfbdec (mup=1)")
    
    def test_nssfbdec_separable_mup(self, matlab_results):
        """Test nssfbdec with separable upsampling matrix (mup=2)."""
        x = matlab_results['test3_input']
        f1 = matlab_results['test3_f1']
        f2 = matlab_results['test3_f2']
        mup = int(matlab_results['test3_mup'][0, 0])
        
        y1_expected = matlab_results['test3_y1']
        y2_expected = matlab_results['test3_y2']
        
        y1, y2 = nssfbdec(x, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="y1 mismatch in nssfbdec (mup=2)")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="y2 mismatch in nssfbdec (mup=2)")
    
    def test_nssfbdec_quincunx_mup(self, matlab_results):
        """Test nssfbdec with quincunx upsampling matrix."""
        x = matlab_results['test4_input']
        f1 = matlab_results['test4_f1']
        f2 = matlab_results['test4_f2']
        mup = matlab_results['test4_mup']
        
        y1_expected = matlab_results['test4_y1']
        y2_expected = matlab_results['test4_y2']
        
        y1, y2 = nssfbdec(x, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="y1 mismatch in nssfbdec (quincunx)")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="y2 mismatch in nssfbdec (quincunx)")
    
    def test_nssfbdec_pyr_filters(self, matlab_results):
        """Test nssfbdec with pyramid filters and quincunx upsampling."""
        x = matlab_results['test5_input']
        f1 = matlab_results['test5_f1']
        f2 = matlab_results['test5_f2']
        mup = matlab_results['test5_mup']
        
        y1_expected = matlab_results['test5_y1']
        y2_expected = matlab_results['test5_y2']
        
        y1, y2 = nssfbdec(x, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y1, y1_expected, decimal=10,
                                            err_msg="y1 mismatch in nssfbdec (pyr)")
        np.testing.assert_array_almost_equal(y2, y2_expected, decimal=10,
                                            err_msg="y2 mismatch in nssfbdec (pyr)")


class TestNssfbrec:
    """Test nssfbrec function - Two-channel nonsubsampled filter bank reconstruction."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat('test_core_results.mat')
    
    def test_nssfbrec_no_mup(self, matlab_results):
        """Test nssfbrec without mup parameter (uses efilter2)."""
        x1 = matlab_results['test6_input1']
        x2 = matlab_results['test6_input2']
        f1 = matlab_results['test6_f1']
        f2 = matlab_results['test6_f2']
        
        y_expected = matlab_results['test6_output']
        
        y = nssfbrec(x1, x2, f1, f2)
        
        np.testing.assert_array_almost_equal(y, y_expected, decimal=10,
                                            err_msg="Output mismatch in nssfbrec (no mup)")
    
    def test_nssfbrec_mup_identity(self, matlab_results):
        """Test nssfbrec with mup=1 (identity upsampling)."""
        x1 = matlab_results['test7_input1']
        x2 = matlab_results['test7_input2']
        f1 = matlab_results['test7_f1']
        f2 = matlab_results['test7_f2']
        mup = int(matlab_results['test7_mup'][0, 0])
        
        y_expected = matlab_results['test7_output']
        
        y = nssfbrec(x1, x2, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y, y_expected, decimal=10,
                                            err_msg="Output mismatch in nssfbrec (mup=1)")
    
    def test_nssfbrec_separable_mup(self, matlab_results):
        """Test nssfbrec with separable upsampling matrix (mup=2)."""
        x1 = matlab_results['test8_input1']
        x2 = matlab_results['test8_input2']
        f1 = matlab_results['test8_f1']
        f2 = matlab_results['test8_f2']
        mup = int(matlab_results['test8_mup'][0, 0])
        
        y_expected = matlab_results['test8_output']
        
        y = nssfbrec(x1, x2, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y, y_expected, decimal=10,
                                            err_msg="Output mismatch in nssfbrec (mup=2)")
    
    def test_nssfbrec_quincunx_mup(self, matlab_results):
        """Test nssfbrec with quincunx upsampling matrix."""
        x1 = matlab_results['test9_input1']
        x2 = matlab_results['test9_input2']
        f1 = matlab_results['test9_f1']
        f2 = matlab_results['test9_f2']
        mup = matlab_results['test9_mup']
        
        y_expected = matlab_results['test9_output']
        
        y = nssfbrec(x1, x2, f1, f2, mup)
        
        np.testing.assert_array_almost_equal(y, y_expected, decimal=10,
                                            err_msg="Output mismatch in nssfbrec (quincunx)")


class TestPerfectReconstruction:
    """Test perfect reconstruction property of the filter bank."""
    
    @pytest.fixture(scope="class")
    def matlab_results(self):
        """Load MATLAB reference results."""
        return loadmat('test_core_results.mat')
    
    def test_perfect_reconstruction_no_mup(self, matlab_results):
        """Test perfect reconstruction without mup parameter."""
        x = matlab_results['test10_input']
        h0 = matlab_results['test10_h0']
        h1 = matlab_results['test10_h1']
        g0 = matlab_results['test10_g0']
        g1 = matlab_results['test10_g1']
        
        recon_expected = matlab_results['test10_recon']
        
        # Decompose
        y1, y2 = nssfbdec(x, h0, h1)
        
        # Reconstruct
        recon = nssfbrec(y1, y2, g0, g1)
        
        # Compare with MATLAB reconstruction
        np.testing.assert_array_almost_equal(recon, recon_expected, decimal=10,
                                            err_msg="Reconstruction mismatch (no mup)")
    
    def test_perfect_reconstruction_separable_mup(self, matlab_results):
        """Test perfect reconstruction with separable upsampling (mup=2)."""
        x = matlab_results['test11_input']
        h0 = matlab_results['test11_h0']
        h1 = matlab_results['test11_h1']
        g0 = matlab_results['test11_g0']
        g1 = matlab_results['test11_g1']
        mup = int(matlab_results['test11_mup'][0, 0])
        
        recon_expected = matlab_results['test11_recon']
        
        # Decompose
        y1, y2 = nssfbdec(x, h0, h1, mup)
        
        # Reconstruct
        recon = nssfbrec(y1, y2, g0, g1, mup)
        
        # Compare with MATLAB reconstruction
        np.testing.assert_array_almost_equal(recon, recon_expected, decimal=10,
                                            err_msg="Reconstruction mismatch (mup=2)")
    
    def test_perfect_reconstruction_quincunx_mup(self, matlab_results):
        """Test perfect reconstruction with quincunx upsampling."""
        x = matlab_results['test12_input']
        h0 = matlab_results['test12_h0']
        h1 = matlab_results['test12_h1']
        g0 = matlab_results['test12_g0']
        g1 = matlab_results['test12_g1']
        mup = matlab_results['test12_mup']
        
        recon_expected = matlab_results['test12_recon']
        
        # Decompose
        y1, y2 = nssfbdec(x, h0, h1, mup)
        
        # Reconstruct
        recon = nssfbrec(y1, y2, g0, g1, mup)
        
        # Compare with MATLAB reconstruction
        np.testing.assert_array_almost_equal(recon, recon_expected, decimal=10,
                                            err_msg="Reconstruction mismatch (quincunx)")


if __name__ == '__main__':
    pytest.main([__file__, '-v'])
