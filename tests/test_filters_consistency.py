"""
ÊµãËØï nsct_python/filters.py Âíå nsct_torch/filters.py ‰πãÈó¥ÁöÑ‰∏ÄËá¥ÊÄß
È™åËØÅÔºöÊï∞ÂÄº‰∏ÄËá¥ÊÄß„ÄÅÁ≤æÂ∫¶‰∏ÄËá¥ÊÄß„ÄÅÂΩ¢Áä∂‰∏ÄËá¥ÊÄß
"""

import pytest
import numpy as np
import torch
import sys
from pathlib import Path

# Ê∑ªÂä†È°πÁõÆÊ†πÁõÆÂΩïÂà∞Ë∑ØÂæÑ
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from nsct_python import filters as np_filters
from nsct_torch import filters as torch_filters


class TestFiltersConsistency:
    """ÊµãËØï numpy Âíå torch ÁâàÊú¨ filters ÁöÑ‰∏ÄËá¥ÊÄß"""
    
    @pytest.fixture
    def tolerance(self):
        """ÂÆö‰πâÊï∞ÂÄºÂÆπÂ∑Æ"""
        return {
            'rtol': 1e-5,  # Áõ∏ÂØπÂÆπÂ∑ÆÔºàfilters ËÆ°ÁÆóÊõ¥Â§çÊùÇÔºåÊîæÂÆΩ‰∏ÄÁÇπÔºâ
            'atol': 1e-7   # ÁªùÂØπÂÆπÂ∑Æ
        }
    
    def numpy_to_torch(self, arr):
        """Â∞Ü numpy Êï∞ÁªÑËΩ¨Êç¢‰∏∫ torch tensor"""
        return torch.from_numpy(arr)
    
    def torch_to_numpy(self, tensor):
        """Â∞Ü torch tensor ËΩ¨Êç¢‰∏∫ numpy Êï∞ÁªÑ"""
        return tensor.cpu().numpy()
    
    def assert_arrays_equal(self, np_result, torch_result, tolerance, show_values=False):
        """Êñ≠Ë®Ä‰∏§‰∏™Êï∞ÁªÑÁõ∏Á≠âÔºànumpy vs torchÔºâÔºåÂåÖÂê´ÈÄêÂÖÉÁ¥†‰∏ÄËá¥ÊÄßÊ£ÄÊü•"""
        # ÂΩ¢Áä∂‰∏ÄËá¥ÊÄß
        assert np_result.shape == torch_result.shape, \
            f"ÂΩ¢Áä∂‰∏ç‰∏ÄËá¥: numpy {np_result.shape} vs torch {torch_result.shape}"
        
        # Êï∞ÂÄº‰∏ÄËá¥ÊÄßÔºàËΩ¨Êç¢‰∏∫ numpy ËøõË°åÊØîËæÉÔºâ
        torch_np = self.torch_to_numpy(torch_result)
        np.testing.assert_allclose(
            np_result, torch_np,
            rtol=tolerance['rtol'],
            atol=tolerance['atol'],
            err_msg="Êï∞ÂÄº‰∏ç‰∏ÄËá¥"
        )
        
        # ÈÄêÂÖÉÁ¥†‰∏ÄËá¥ÊÄßÂàÜÊûê
        diff = np.abs(np_result - torch_np)
        max_diff = np.max(diff)
        mean_diff = np.mean(diff)
        median_diff = np.median(diff)
        
        # ËÆ°ÁÆóÁõ∏ÂØπËØØÂ∑Æ
        with np.errstate(divide='ignore', invalid='ignore'):
            rel_diff = np.abs(np_result - torch_np) / (np.abs(np_result) + 1e-10)
            max_rel_diff = np.max(rel_diff)
            mean_rel_diff = np.mean(rel_diff)
        
        # ÁªüËÆ°Ë∂ÖÂá∫ÂÆπÂ∑ÆÁöÑÂÖÉÁ¥†
        atol_violations = np.sum(diff > tolerance['atol'])
        rtol_violations = np.sum(rel_diff > tolerance['rtol'])
        total_elements = np_result.size
        
        print(f"  ‚úì ÂΩ¢Áä∂‰∏ÄËá¥ÊÄß: {np_result.shape}")
        print(f"  ‚úì numpy dtype: {np_result.dtype}, torch dtype: {torch_result.dtype}")
        print(f"  ‚úì ÈÄêÂÖÉÁ¥†‰∏ÄËá¥ÊÄßÂàÜÊûê:")
        print(f"    - ÊÄªÂÖÉÁ¥†Êï∞: {total_elements}")
        print(f"    - ÊúÄÂ§ßÁªùÂØπÂ∑ÆÂºÇ: {max_diff:.2e}")
        print(f"    - Âπ≥ÂùáÁªùÂØπÂ∑ÆÂºÇ: {mean_diff:.2e}")
        print(f"    - ‰∏≠‰ΩçÊï∞ÁªùÂØπÂ∑ÆÂºÇ: {median_diff:.2e}")
        print(f"    - ÊúÄÂ§ßÁõ∏ÂØπÂ∑ÆÂºÇ: {max_rel_diff:.2e}")
        print(f"    - Âπ≥ÂùáÁõ∏ÂØπÂ∑ÆÂºÇ: {mean_rel_diff:.2e}")
        print(f"    - Ë∂ÖÂá∫ÁªùÂØπÂÆπÂ∑Æ ({tolerance['atol']:.2e}) ÁöÑÂÖÉÁ¥†: {atol_violations} ({100*atol_violations/total_elements:.2f}%)")
        print(f"    - Ë∂ÖÂá∫Áõ∏ÂØπÂÆπÂ∑Æ ({tolerance['rtol']:.2e}) ÁöÑÂÖÉÁ¥†: {rtol_violations} ({100*rtol_violations/total_elements:.2f}%)")
        
        # Â¶ÇÊûúÊúâ‰∏ç‰∏ÄËá¥ÁöÑÂÖÉÁ¥†ÔºåÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
        if atol_violations > 0 and np_result.size <= 100:
            print(f"  ‚ö†Ô∏è  ‰∏ç‰∏ÄËá¥ÂÖÉÁ¥†‰ΩçÁΩÆ:")
            inconsistent_indices = np.where(diff > tolerance['atol'])
            for idx in zip(*inconsistent_indices):
                if len(idx) == 1:
                    i = idx[0]
                    print(f"    ‰ΩçÁΩÆ [{i}]: numpy={np_result.flat[i]:.6e}, torch={torch_np.flat[i]:.6e}, diff={diff.flat[i]:.6e}")
                elif len(idx) == 2:
                    i, j = idx
                    print(f"    ‰ΩçÁΩÆ [{i},{j}]: numpy={np_result[i,j]:.6e}, torch={torch_np[i,j]:.6e}, diff={diff[i,j]:.6e}")
        
        if show_values and np_result.size <= 50:
            print(f"\n  üìä NumPy ËæìÂá∫:\n  {np_result}")
            print(f"\n  üìä PyTorch ËæìÂá∫:\n  {torch_np}")
            print(f"\n  üìä ÈÄêÂÖÉÁ¥†Â∑ÆÂºÇ:\n  {diff}")
    
    # ==================== ldfilter ÊµãËØï ====================
    
    def test_ldfilter_pkva6(self, tolerance):
        """ÊµãËØï ldfilter ÂáΩÊï∞ - pkva6"""
        print("\nÊµãËØï ldfilter (pkva6):")
        
        result_np = np_filters.ldfilter('pkva6')
        result_torch = torch_filters.ldfilter('pkva6')
        
        self.assert_arrays_equal(result_np, result_torch, tolerance, show_values=True)
    
    def test_ldfilter_pkva8(self, tolerance):
        """ÊµãËØï ldfilter ÂáΩÊï∞ - pkva8"""
        print("\nÊµãËØï ldfilter (pkva8):")
        
        result_np = np_filters.ldfilter('pkva8')
        result_torch = torch_filters.ldfilter('pkva8')
        
        self.assert_arrays_equal(result_np, result_torch, tolerance)
    
    # ==================== dmaxflat ÊµãËØï ====================
    
    def test_dmaxflat_N2(self, tolerance):
        """ÊµãËØï dmaxflat ÂáΩÊï∞ - N=2"""
        print("\nÊµãËØï dmaxflat (N=2, d=0):")
        
        result_np = np_filters.dmaxflat(2, 0)
        result_torch = torch_filters.dmaxflat(2, 0)
        
        self.assert_arrays_equal(result_np, result_torch, tolerance)
    
    def test_dmaxflat_N3(self, tolerance):
        """ÊµãËØï dmaxflat ÂáΩÊï∞ - N=3"""
        print("\nÊµãËØï dmaxflat (N=3, d=1):")
        
        result_np = np_filters.dmaxflat(3, 1)
        result_torch = torch_filters.dmaxflat(3, 1)
        
        self.assert_arrays_equal(result_np, result_torch, tolerance)
    
    def test_dmaxflat_N5(self, tolerance):
        """ÊµãËØï dmaxflat ÂáΩÊï∞ - N=5"""
        print("\nÊµãËØï dmaxflat (N=5, d=0):")
        
        result_np = np_filters.dmaxflat(5, 0)
        result_torch = torch_filters.dmaxflat(5, 0)
        
        self.assert_arrays_equal(result_np, result_torch, tolerance)
    
    # ==================== atrousfilters ÊµãËØï ====================
    
    def test_atrousfilters_pyr(self, tolerance):
        """ÊµãËØï atrousfilters ÂáΩÊï∞ - pyr"""
        print("\nÊµãËØï atrousfilters (pyr):")
        
        h0_np, h1_np, g0_np, g1_np = np_filters.atrousfilters('pyr')
        h0_torch, h1_torch, g0_torch, g1_torch = torch_filters.atrousfilters('pyr')
        
        print("  h0:")
        self.assert_arrays_equal(h0_np, h0_torch, tolerance)
        print("  h1:")
        self.assert_arrays_equal(h1_np, h1_torch, tolerance)
        print("  g0:")
        self.assert_arrays_equal(g0_np, g0_torch, tolerance)
        print("  g1:")
        self.assert_arrays_equal(g1_np, g1_torch, tolerance)
    
    def test_atrousfilters_pyrexc(self, tolerance):
        """ÊµãËØï atrousfilters ÂáΩÊï∞ - pyrexc"""
        print("\nÊµãËØï atrousfilters (pyrexc):")
        
        h0_np, h1_np, g0_np, g1_np = np_filters.atrousfilters('pyrexc')
        h0_torch, h1_torch, g0_torch, g1_torch = torch_filters.atrousfilters('pyrexc')
        
        print("  h0:")
        self.assert_arrays_equal(h0_np, h0_torch, tolerance)
        print("  h1:")
        self.assert_arrays_equal(h1_np, h1_torch, tolerance)
        print("  g0:")
        self.assert_arrays_equal(g0_np, g0_torch, tolerance)
        print("  g1:")
        self.assert_arrays_equal(g1_np, g1_torch, tolerance)
    
    # ==================== mctrans ÊµãËØï ====================
    
    def test_mctrans_basic(self, tolerance):
        """ÊµãËØï mctrans ÂáΩÊï∞ - Âü∫Êú¨ÊÉÖÂÜµ"""
        print("\nÊµãËØï mctrans (Âü∫Êú¨ÊÉÖÂÜµ):")
        
        b_np = np.array([1, 2, 1]) / 4.0
        t_np = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]]) / 4.0
        
        b_torch = self.numpy_to_torch(b_np)
        t_torch = self.numpy_to_torch(t_np)
        
        result_np = np_filters.mctrans(b_np, t_np)
        result_torch = torch_filters.mctrans(b_torch, t_torch)
        
        self.assert_arrays_equal(result_np, result_torch, tolerance, show_values=True)
    
    # ==================== ld2quin ÊµãËØï ====================
    
    def test_ld2quin_pkva6(self, tolerance):
        """ÊµãËØï ld2quin ÂáΩÊï∞ - pkva6"""
        print("\nÊµãËØï ld2quin (pkva6):")
        
        beta_np = np_filters.ldfilter('pkva6')
        beta_torch = torch_filters.ldfilter('pkva6')
        
        h0_np, h1_np = np_filters.ld2quin(beta_np)
        h0_torch, h1_torch = torch_filters.ld2quin(beta_torch)
        
        print("  h0:")
        self.assert_arrays_equal(h0_np, h0_torch, tolerance)
        print("  h1:")
        self.assert_arrays_equal(h1_np, h1_torch, tolerance)
    
    # ==================== efilter2 ÊµãËØï ====================
    
    def test_efilter2_basic(self, tolerance):
        """ÊµãËØï efilter2 ÂáΩÊï∞ - Âü∫Êú¨ÊÉÖÂÜµ"""
        print("\nÊµãËØï efilter2 (Âü∫Êú¨ÊÉÖÂÜµ):")
        
        x_np = np.arange(9).reshape(3, 3).astype(np.float32)
        f_np = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]).astype(np.float32)
        
        x_torch = self.numpy_to_torch(x_np)
        f_torch = self.numpy_to_torch(f_np)
        
        result_np = np_filters.efilter2(x_np, f_np, 'per')
        result_torch = torch_filters.efilter2(x_torch, f_torch, 'per')
        
        self.assert_arrays_equal(result_np, result_torch, tolerance, show_values=True)
    
    def test_efilter2_larger(self, tolerance):
        """ÊµãËØï efilter2 ÂáΩÊï∞ - Êõ¥Â§ßÁü©Èòµ"""
        print("\nÊµãËØï efilter2 (Êõ¥Â§ßÁü©Èòµ):")
        
        x_np = np.random.randn(16, 16).astype(np.float32)
        f_np = np.ones((5, 5)).astype(np.float32) / 25.0
        
        x_torch = self.numpy_to_torch(x_np)
        f_torch = self.numpy_to_torch(f_np)
        
        result_np = np_filters.efilter2(x_np, f_np, 'per')
        result_torch = torch_filters.efilter2(x_torch, f_torch, 'per')
        
        self.assert_arrays_equal(result_np, result_torch, tolerance)
    
    # ==================== dfilters ÊµãËØï ====================
    
    def test_dfilters_pkva(self, tolerance):
        """ÊµãËØï dfilters ÂáΩÊï∞ - pkva"""
        print("\nÊµãËØï dfilters (pkva):")
        
        h0_np, h1_np = np_filters.dfilters('pkva', 'd')
        h0_torch, h1_torch = torch_filters.dfilters('pkva', 'd')
        
        print("  h0:")
        self.assert_arrays_equal(h0_np, h0_torch, tolerance)
        print("  h1:")
        self.assert_arrays_equal(h1_np, h1_torch, tolerance)
    
    def test_dfilters_dmaxflat3(self, tolerance):
        """ÊµãËØï dfilters ÂáΩÊï∞ - dmaxflat3"""
        print("\nÊµãËØï dfilters (dmaxflat3):")
        
        h0_np, h1_np = np_filters.dfilters('dmaxflat3', 'd')
        h0_torch, h1_torch = torch_filters.dfilters('dmaxflat3', 'd')
        
        print("  h0:")
        self.assert_arrays_equal(h0_np, h0_torch, tolerance)
        print("  h1:")
        self.assert_arrays_equal(h1_np, h1_torch, tolerance)
    
    # ==================== parafilters ÊµãËØï ====================
    
    def test_parafilters_basic(self, tolerance):
        """ÊµãËØï parafilters ÂáΩÊï∞ - Âü∫Êú¨ÊÉÖÂÜµ"""
        print("\nÊµãËØï parafilters (Âü∫Êú¨ÊÉÖÂÜµ):")
        
        f1_np = np.ones((3, 3)).astype(np.float64)
        f2_np = np.ones((3, 3)).astype(np.float64) * 2
        
        f1_torch = self.numpy_to_torch(f1_np)
        f2_torch = self.numpy_to_torch(f2_np)
        
        y1_np, y2_np = np_filters.parafilters(f1_np, f2_np)
        y1_torch, y2_torch = torch_filters.parafilters(f1_torch, f2_torch)
        
        # Ê£ÄÊü•ÂàóË°®ÈïøÂ∫¶
        assert len(y1_np) == len(y1_torch) == 4
        assert len(y2_np) == len(y2_torch) == 4
        
        # Ê£ÄÊü•ÊØè‰∏™Êª§Ê≥¢Âô®
        for i in range(4):
            print(f"  y1[{i}]:")
            self.assert_arrays_equal(y1_np[i], y1_torch[i], tolerance)
            print(f"  y2[{i}]:")
            self.assert_arrays_equal(y2_np[i], y2_torch[i], tolerance)


if __name__ == '__main__':
    # ÂèØ‰ª•Áõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂ËøõË°åÂø´ÈÄüÊµãËØï
    pytest.main([__file__, '-v', '-s'])
